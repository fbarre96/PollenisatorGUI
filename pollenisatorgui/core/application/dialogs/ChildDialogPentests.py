"""Help the user to create a new pentest database.
"""
import tkinter as tk
from customtkinter import *
from pollenisatorgui.core.application.dialogs.ChildDialogAskText import ChildDialogAskText
from pollenisatorgui.core.application.dialogs.ChildDialogQuestion import ChildDialogQuestion
from pollenisatorgui.core.application.dialogs.ChildDialogNewPentest import ChildDialogNewPentest
from pollenisatorgui.core.forms.formpanel import FormPanel
from pollenisatorgui.core.components.apiclient import APIClient
from pollenisatorgui.core.application.scrollableframexplateform import ScrollableFrameXPlateform
import pollenisatorgui.core.components.utils as utils
from datetime import datetime
from PIL import Image, ImageTk

class ChildDialogPentests(CTkToplevel):
    """
    Open a child dialog of a tkinter application to ask details about
    a new pentest database to create.
    """

    def __init__(self, parent):
        """
        Open a child dialog of a tkinter application to ask details about
        the new pentest.

        Args:
            parent: the tkinter parent view to use for this window construction.
        """
        super().__init__(parent)
        self.parent = parent
        self.title("Create a pentest")
        self.resizable(True, True)
        self.geometry("900x600")
        self.rvalue = None
        self.parent = parent
        

        self.link_image = CTkImage(Image.open(utils.getIcon("link.png"))) # button with text
        self.delete_image = tk.PhotoImage(file=utils.getIcon("delete.png")) # icon button
        # Load the image
        image=Image.open(utils.getIcon("documents.png"))
        img=image.resize((16, 16))
        self.copy_image = ImageTk.PhotoImage(img)
        image=Image.open(utils.getIcon("save.png"))
        img=image.resize((16, 16))
        self.export_image = ImageTk.PhotoImage(img)

        self.mainFrame = ScrollableFrameXPlateform(self)
        self.reloadUI()
        self.mainFrame.pack(fill=tk.BOTH, ipadx=10, ipady=10, expand=1)
        try:
            self.wait_visibility()
            self.transient(self.parent)
            self.focus_force()
            self.grab_set()
            self.lift()
        except tk.TclError:
            pass

    def reloadUI(self):
        for widget in self.mainFrame.winfo_children():
            widget.destroy()
        apiclient = APIClient.getInstance()
        pentests = apiclient.getPentestList()
        if pentests is None:
            pentests = []
        else:
            pentests = pentests[::-1]
        self.form = FormPanel()
        form1 = self.form.addFormPanel(fill=tk.BOTH)
        form1.addFormLabel("My Pentests")
        self.plus_image = CTkImage(Image.open(utils.getIcon("plus.png")))
        self.import_image = CTkImage(Image.open(utils.getIcon("import.png")))
        form1.addFormButton("Create new Pentest", self.selectNewPentest, image=self.plus_image, side=tk.LEFT)
        form1.addFormButton("Import archive", self.importPentest,  side=tk.LEFT, image=self.import_image)

        self.form.addFormSeparator()
        self.form2 = self.form.addFormPanel(grid=True, fill=tk.BOTH, make_uniform_column=4)
        self.form2.addFormLabel("Pentest name", text="Pentest name", bold=True, row=0, column=0, sticky=tk.W)
        self.form2.addFormLabel("Creator", text="Creator", bold=True, row=0, column=1, sticky=tk.W)
        self.form2.addFormLabel("Date", text="Date", bold=True, row=0, column=2, sticky=tk.W)
        self.form2.addFormLabel("Actions", text="Actions", bold=True, row=0, column=3, sticky=tk.W)
        self.form2.addFormSeparator(row=1, column=0, columnspan=4, sticky=tk.EW)
        i=2
        for pentest in pentests:
            date = pentest["creation_date"]
            date_o = datetime.fromisoformat(date)
            self.form2.addFormLabel("pentest_name", text=pentest["nom"],row=i, column=0, sticky=tk.W)
            self.form2.addFormLabel("pentest_creator", text=pentest["owner"], row=i, column=1, sticky=tk.W)
            self.form2.addFormLabel("pentest_date", text=utils.dateToString(date_o), row=i, column=2, sticky=tk.W)
            formAction = self.form2.addFormPanel(row=i, column=3, sticky=tk.W)
            formAction.addFormButton("", self.exportPentest, style="icon.TButton", side=tk.RIGHT, image=self.export_image, tooltip="Export", infos={"name":pentest["nom"]})
            formAction.addFormButton("", self.wrapCopyDb, style="icon.TButton", side=tk.RIGHT, image=self.copy_image, tooltip="duplicate pentest", infos={"name":pentest["nom"]})
            formAction.addFormButton("", self.deleteAPentest, style="icon.TButton", side=tk.RIGHT, image=self.delete_image, tooltip="delete pentest" , infos={"name":pentest["nom"]})
            formAction.addFormButton("Open", self.openPentest, image=self.link_image, side=tk.RIGHT, infos={"name":pentest["nom"]})
            self.form2.addFormSeparator(row=i+1, column=0, columnspan=4, sticky=tk.EW)
            i+=2
        self.form.constructView(self.mainFrame)
        self.mainFrame.pack(fill=tk.BOTH, ipadx=10, ipady=10, expand=1)
        try:
            self.wait_visibility()
            self.transient(self.parent)
            self.focus_force()
            self.grab_set()
            self.lift()
        except tk.TclError:
            pass

    def openPentest(self, event, infos):
        name = infos.get("name")
        self.rvalue = name
        self.quit()
    
    def deleteAPentest(self, event, infos):
        """
        Ask a user a pentest name then delete it.
        """
        apiclient = APIClient.getInstance()
        pentestName = infos.get("name")
        dialog = ChildDialogQuestion(self, "Pentest deletion confirmation", "You are going to delete permanently the database \""+pentestName+"\". Are you sure ?")
        self.wait_window(dialog.app)
        if dialog.rvalue == "Yes":
            res = apiclient.doDeletePentest(pentestName)
            if res:
                try:
                    path = os.path.join(utils.getLocalDir(), "states/", "."+pentestName)
                    os.remove(path)
                except FileNotFoundError:
                    pass
            self.reloadUI()
        


    def selectNewPentest(self, _event=None):
        """
        Ask a user for a new pentest name. Then creates it.
        """
        validPentest = False
        default = {}
        while not validPentest:
            dialog = ChildDialogNewPentest(self, default)
            self.wait_window(dialog.app)
            if dialog.rvalue is None:
                return
            if isinstance(dialog.rvalue, dict):
                default = dialog.rvalue
                dbName = dialog.rvalue["name"]
                pentest_type = dialog.rvalue["type"]
                start_date = dialog.rvalue["start"]
                end_date = dialog.rvalue["end"]
                scope = dialog.rvalue["scope"]
                settings = dialog.rvalue["settings"]
                pentesters = dialog.rvalue["pentesters"]
                validPentest = self.newPentest(dbName, pentest_type, start_date, end_date, scope, settings, pentesters)
                if validPentest:
                    dialog.rvalue = dbName
                    self.quit()
            

    def quit(self):
        self.destroy()

    def wrapCopyDb(self, _event, infos):
        """
        Call default copy database from a callback event.

        Args:
            _event: not used but mandatory
        """
        apiclient = APIClient.getInstance()
        pentestName = infos.get("name")
        success = apiclient.setCurrentPentest(pentestName)
        if not success:
            tk.messagebox.showerror("Failed", "Failed to connect to the selected pentest")
            return
        dialog = ChildDialogAskText(self, "Enter copy's name  of "+apiclient.getCurrentPentest()+" database name :", multiline=False)
        self.wait_window(dialog.app)
        name = dialog.rvalue
        if name is None:
            return
        apiclient.copyDb(apiclient.getCurrentPentest(), name)
        apiclient.disconnect()
        self.reloadUI()

    def importPentest(self, event=None):
        """
        Import a pentest archive file gunzip to database.
        Args:
            name: The filename of the gunzip database exported previously
        """
        apiclient = APIClient.getInstance()
        filename = ""
        f = tk.filedialog.askopenfilename(defaultextension=".gz")
        if not isinstance(f, str):  # asksaveasfile return `None` if dialog closed with "cancel".
            return
        if len(str(f).strip()) == 0:
            return
        filename = str(f)
        original_dbname = ChildDialogAskText(self, "Enter the original database name :", multiline=False)
        self.wait_window(original_dbname.app)
        if original_dbname.rvalue is None:
            return
        
        success = apiclient.importDb(filename, original_dbname.rvalue)
        if success:
            tk.messagebox.showinfo("Database import ", "Database import suceeded")
        else:
            tk.messagebox.showerror("Database import ", "Database import failed")
        self.reloadUI()

    def exportPentest(self, event, info):
        """
        Dump a pentest database to an archive file gunzip.
        """
        apiclient = APIClient.getInstance()
        pentestName = info.get("name")
        success = apiclient.setCurrentPentest(pentestName)
        if not success:
            tk.messagebox.showerror("Failed", "Failed to connect to the selected pentest")
            return
        success, msg = apiclient.dumpDb(pentestName)
        if not success:
            tk.messagebox.showerror("Database export error", msg)
        else:
            tk.messagebox.showinfo("Database export completed", msg)